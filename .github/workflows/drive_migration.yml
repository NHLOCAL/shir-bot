name: Upload new singles to Drive

on:
  push:
    branches:
      - new-singles # או הענף הראשי שלך
    paths:
      # הפעל את ה-workflow אם הסקריפט או קובץ הדרישות משתנים
      - 'drive_migrator.py'
      - 'requirements.txt'
  workflow_dispatch: # מאפשר הפעלה ידנית מטאב ה-Actions
  schedule:
    # מריץ פעם ביום ב-03:00 UTC. התאם לפי הצורך.
    # הערה: אם אין שינויים בקבצים במקור, הריצה לא תעשה הרבה ותסיים מהר.
    - cron: '0 3 * * *'

permissions:
  contents: write # מאפשר ל-workflow לעשות commit ו-push לריפו

jobs:
  migrate-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # משיכת היסטוריה מלאה עשויה לעזור אם יש צורך בהשוואות מורכבות,
          # אך לרוב מספיק HEAD עבור commit פשוט.
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # בחר גרסת פייתון שתומכת בספריות שלך

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # ודא שקובץ requirements.txt מכיל את כל הספריות הנדרשות:
          # requests, google-api-python-client, google-auth-httplib2, google-auth-oauthlib, pyluach, certifi
          pip install -r requirements.txt

      - name: Authenticate Google Drive
        env:
          # ממלא את משתנה הסביבה שהסקריפט מצפה לו
          GDRIVE_TOKEN_JSON_CONTENT: ${{ secrets.GDRIVE_TOKEN_JSON }}
        run: |
          # בדיקה אם ה-secret ריק או לא מוגדר
          if [ -z "$GDRIVE_TOKEN_JSON_CONTENT" ]; then
            echo "::error::GDRIVE_TOKEN_JSON secret is not set or empty. Authentication cannot proceed."
            exit 1
          else
            echo "Google Drive secret found. Proceeding..."
            # אין צורך לכתוב לקובץ token.json, הסקריפט קורא ישירות ממשתנה הסביבה
          fi

      - name: Run Drive Migrator Script
        env:
          # העברת תוכן ה-secret שוב למקרה הצורך (למרות שפונקציית האימות אמורה לקלוט אותו)
          GDRIVE_TOKEN_JSON_CONTENT: ${{ secrets.GDRIVE_TOKEN_JSON }}
        # הפעל את הסקריפט החדש
        run: python drive_migrator.py

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Check for changes in state or csv file
        id: check_changes
        run: |
          # הוסף את הקבצים החדשים למעקב Git
          git add migrator_state.json new-songs.csv
          # בדוק אם יש שינויים בקבצים שנוספו (staged)
          if git diff --staged --quiet; then
            echo "No changes detected in migrator_state.json or new-songs.csv."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in migrator_state.json or new-songs.csv."
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        # בצע רק אם זוהו שינויים בשלב הקודם
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          # עדכן את הודעת ה-commit לשקף את הקבצים החדשים
          git commit -m "Update migrator_state.json and new-songs.csv from migration job [skip ci]"
          # הוספת לוגיקת ניסיון חוזר עבור push למקרה של בעיות רשת זמניות
          retry_count=0
          max_retries=3
          until git push || [ $retry_count -eq $max_retries ]; do
            retry_count=$((retry_count+1))
            echo "Push failed. Retrying ($retry_count/$max_retries) in 10 seconds..."
            sleep 10
          done
          if [ $retry_count -eq $max_retries ]; then
            echo "::error::Failed to push changes after multiple retries."
            exit 1
          fi
          echo "Changes committed and pushed successfully."